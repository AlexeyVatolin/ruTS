{"config":{"lang":["ru","en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Russian Texts Statistics (ruTS) \u00b6 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u00b6 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c: $ pip install ruts \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438: python 3.6+ nltk pymorphy2 razdel scipy spacy \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u00b6 examples - \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Visualizers.ipynb - \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 ruts : basic_stats.py - \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 components.py - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b spaCy constants.py - \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b diversity_stats.py - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 extractors.py - \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 morph_stats.py - \u043c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 readability_stats.py - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 utils.py - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b visualizers.py - \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 datasets - \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445: dataset.py - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 sov_chrest_lit.py - \u0441\u043e\u0432\u0435\u0442\u0441\u043a\u0438\u0435 \u0445\u0440\u0435\u0441\u0442\u043e\u043c\u0430\u0442\u0438\u0438 \u043f\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0435 tests : test_basic_stats.py - \u0442\u0435\u0441\u0442\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a test_components.py - \u0442\u0435\u0441\u0442\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 spaCy test_diversity_stats.py - \u0442\u0435\u0441\u0442\u044b \u043c\u0435\u0442\u0440\u0438\u043a \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 test_extractors.py - \u0442\u0435\u0441\u0442\u044b \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 test_morph_stats - \u0442\u0435\u0441\u0442\u044b \u043c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a test_readability_stats.py - \u0442\u0435\u0441\u0442\u044b \u043c\u0435\u0442\u0440\u0438\u043a \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"\u041e \u043f\u0440\u043e\u0435\u043a\u0442\u0435"},{"location":"#russian-texts-statistics-ruts","text":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435.","title":"Russian Texts Statistics (ruTS)"},{"location":"#_1","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c: $ pip install ruts \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438: python 3.6+ nltk pymorphy2 razdel scipy spacy","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"#_2","text":"examples - \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Visualizers.ipynb - \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 ruts : basic_stats.py - \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 components.py - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b spaCy constants.py - \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b diversity_stats.py - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 extractors.py - \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 morph_stats.py - \u043c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 readability_stats.py - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 utils.py - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b visualizers.py - \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 datasets - \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445: dataset.py - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 sov_chrest_lit.py - \u0441\u043e\u0432\u0435\u0442\u0441\u043a\u0438\u0435 \u0445\u0440\u0435\u0441\u0442\u043e\u043c\u0430\u0442\u0438\u0438 \u043f\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0435 tests : test_basic_stats.py - \u0442\u0435\u0441\u0442\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a test_components.py - \u0442\u0435\u0441\u0442\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 spaCy test_diversity_stats.py - \u0442\u0435\u0441\u0442\u044b \u043c\u0435\u0442\u0440\u0438\u043a \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 test_extractors.py - \u0442\u0435\u0441\u0442\u044b \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 test_morph_stats - \u0442\u0435\u0441\u0442\u044b \u043c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a test_readability_stats.py - \u0442\u0435\u0441\u0442\u044b \u043c\u0435\u0442\u0440\u0438\u043a \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"authors/","text":"\u0410\u0432\u0442\u043e\u0440\u044b \u00b6 \u0428\u043a\u0430\u0440\u0438\u043d \u0421\u0435\u0440\u0433\u0435\u0439 \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447 - Data Scientist, \u041c\u043e\u0441\u043a\u0432\u0430 \u0421\u043c\u0438\u0440\u043d\u043e\u0432\u0430 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u042e\u0440\u044c\u0435\u0432\u043d\u0430 - Data Analyst, \u041c\u043e\u0441\u043a\u0432\u0430","title":"\u0410\u0432\u0442\u043e\u0440\u044b"},{"location":"authors/#_1","text":"\u0428\u043a\u0430\u0440\u0438\u043d \u0421\u0435\u0440\u0433\u0435\u0439 \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447 - Data Scientist, \u041c\u043e\u0441\u043a\u0432\u0430 \u0421\u043c\u0438\u0440\u043d\u043e\u0432\u0430 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u042e\u0440\u044c\u0435\u0432\u043d\u0430 - Data Analyst, \u041c\u043e\u0441\u043a\u0432\u0430","title":"\u0410\u0432\u0442\u043e\u0440\u044b"},{"location":"components/","text":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u00b6 Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Example Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"components/#_1","text":"Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Example Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"datasets/","text":"\u041d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6","title":"\u041d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"datasets/#_1","text":"","title":"\u041d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"extractors/","text":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u00b6","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"extractors/#_1","text":"","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"stats/basic_stats/","text":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u00b6","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438"},{"location":"stats/basic_stats/#_1","text":"","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438"},{"location":"stats/diversity_stats/","text":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f \u00b6","title":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f"},{"location":"stats/diversity_stats/#_1","text":"","title":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043b\u0435\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f"},{"location":"stats/morph_stats/","text":"\u041c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u00b6","title":"\u041c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438"},{"location":"stats/morph_stats/#_1","text":"","title":"\u041c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438"},{"location":"stats/readability_stats/","text":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u00b6","title":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438"},{"location":"stats/readability_stats/#_1","text":"","title":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438"},{"location":"visualizers/fingerprinting/","text":"\u041b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u0434\u0430\u043a\u0442\u0438\u043b\u043e\u0441\u043a\u043e\u043f\u0438\u044f \u00b6","title":"\u041b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u0434\u0430\u043a\u0442\u0438\u043b\u043e\u0441\u043a\u043e\u043f\u0438\u044f"},{"location":"visualizers/fingerprinting/#_1","text":"","title":"\u041b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u0434\u0430\u043a\u0442\u0438\u043b\u043e\u0441\u043a\u043e\u043f\u0438\u044f"},{"location":"visualizers/zipf/","text":"\u0417\u0430\u043a\u043e\u043d \u0426\u0438\u043f\u0444\u0430 \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u00b6 \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0417\u0430\u043a\u043e\u043d\u0430 \u0426\u0438\u043f\u0444\u0430 (Zipf's law) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u043e\u0432. \u0410\u0434\u0440\u0435\u0441 ruts.visualizers.zipf() \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u00b6 \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0422\u0438\u043f \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 counter Counter - \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u043e\u0432 num_words int None \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0430\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 num_labels int 10 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u044b\u0445 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 log bool True \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0448\u043a\u0430\u043b\u0443 show_theory bool False \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0417\u0430\u043a\u043e\u043d\u0443 \u0426\u0438\u043f\u0444\u0430 alpha float 1.5 \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u03b1 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0417\u0430\u043a\u043e\u043d\u0430 \u0426\u0438\u043f\u0444\u0430 \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 100 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 SovChLit. \u041f\u0440\u0438\u043c\u0435\u0440 \u041a\u043e\u0434 : # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a from collections import Counter from nltk.corpus import stopwords from ruts import WordsExtractor from ruts.datasets import SovChLit from ruts.visualizers import zipf # \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 sc = SovChLit () texts = [ text for text in sc . get_texts ( limit = 100 )] text = ' \\n ' . join ( texts ) # \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u043e\u0432 we = WordsExtractor ( text , use_lexemes = True , stopwords = stopwords . words ( 'russian' ), filter_nums = True ) tokens_with_count = Counter ( we . extract ()) # \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 zipf ( tokens_with_count , num_words = 100 , num_labels = 10 , log = False , show_theory = True , alpha = 1.1 ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 :","title":"\u0417\u0430\u043a\u043e\u043d \u0426\u0438\u043f\u0444\u0430"},{"location":"visualizers/zipf/#_1","text":"","title":"\u0417\u0430\u043a\u043e\u043d \u0426\u0438\u043f\u0444\u0430"},{"location":"visualizers/zipf/#_2","text":"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0417\u0430\u043a\u043e\u043d\u0430 \u0426\u0438\u043f\u0444\u0430 (Zipf's law) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u043e\u0432. \u0410\u0434\u0440\u0435\u0441 ruts.visualizers.zipf()","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"visualizers/zipf/#_3","text":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0422\u0438\u043f \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 counter Counter - \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u043e\u0432 num_words int None \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0430\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 num_labels int 10 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u044b\u0445 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 log bool True \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0448\u043a\u0430\u043b\u0443 show_theory bool False \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0417\u0430\u043a\u043e\u043d\u0443 \u0426\u0438\u043f\u0444\u0430 alpha float 1.5 \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u03b1 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0417\u0430\u043a\u043e\u043d\u0430 \u0426\u0438\u043f\u0444\u0430","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b"},{"location":"visualizers/zipf/#_4","text":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 100 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 SovChLit. \u041f\u0440\u0438\u043c\u0435\u0440 \u041a\u043e\u0434 : # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a from collections import Counter from nltk.corpus import stopwords from ruts import WordsExtractor from ruts.datasets import SovChLit from ruts.visualizers import zipf # \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 sc = SovChLit () texts = [ text for text in sc . get_texts ( limit = 100 )] text = ' \\n ' . join ( texts ) # \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u043e\u0432 we = WordsExtractor ( text , use_lexemes = True , stopwords = stopwords . words ( 'russian' ), filter_nums = True ) tokens_with_count = Counter ( we . extract ()) # \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 zipf ( tokens_with_count , num_words = 100 , num_labels = 10 , log = False , show_theory = True , alpha = 1.1 ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 :","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"}]}